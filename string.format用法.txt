本文实例总结了C#中string.format用法。分享给大家供大家参考。具体分析如下：

String.Format 方法的几种定义：

String.Format (String, Object) 将指定的 String 中的格式项替换为指定的 Object 实例的值的文本等效项。
String.Format (String, Object[]) 将指定 String 中的格式项替换为指定数组中相应 Object 实例的值的文本等效项。
String.Format (IFormatProvider, String, Object[]) 将指定 String 中的格式项替换为指定数组中相应 Object 实例的值的文本等效项。指定的参数提供区域性特定的格式设置信息。
String.Format (String, Object, Object) 将指定的 String 中的格式项替换为两个指定的 Object 实例的值的文本等效项。 
String.Format (String, Object, Object, Object) 将指定的 String 中的格式项替换为三个指定的 Object 实例的值的文本等效项。
 
常用的格式化数值结果表
 

字符
	

说明
	

示例
	

输出
C 	货币 	string.Format("{0:C3}", 2) 	＄2.000
D 	十进制 	string.Format("{0:D3}", 2) 	002
E 	科学计数法 	1.20E+001 	1.20E+001
G 	常规 	string.Format("{0:G}", 2) 	2
N 	用分号隔开的数字 	string.Format("{0:N}", 250000) 	250,000.00
X 	十六进制 	string.Format("{0:X000}", 12) 	C
  	  	string.Format("{0:000.000}", 12.2) 	012.200

常用的几种实例
 
1、字符串的数字格式

复制代码 代码如下:
string str1 =string.Format("{0:N1}",56789);               //result: 56,789.0
 string str2 =string.Format("{0:N2}",56789);               //result: 56,789.00
 string str3 =string.Format("{0:N3}",56789);               //result: 56,789.000
 string str8 =string.Format("{0:F1}",56789);               //result: 56789.0
 string str9 =string.Format("{0:F2}",56789);               //result: 56789.00
 string str11 =(56789 / 100.0).ToString("#.##");           //result: 567.89
 string str12 =(56789 / 100).ToString("#.##");             //result: 567

 
2、格式化货币（跟系统的环境有关，中文系统默认格式化人民币，英文系统格式化美元）
复制代码 代码如下:
string.Format("{0:C}",0.2)
结果为：￥0.20 （英文操作系统结果：$0.20）
默认格式化小数点后面保留两位小数，如果需要保留一位或者更多，可以指定位数
复制代码 代码如下:
string.Format("{0:C1}",23.15)
结果为：￥23.2 （截取会自动四舍五入）
格式化多个Object实例
复制代码 代码如下:
string.Format("市场价：{0:C}，优惠价{1:C}",23.15,19.82)

 
3、格式化十进制的数字（格式化成固定的位数，位数不能少于未格式化前，只支持整形）
复制代码 代码如下:
string.Format("{0:D3}",23) //结果为：023
string.Format("{0:D2}",1223) //结果为：1223，（精度说明符指示结果字符串中所需的最少数字个数。）

 
4、用分号隔开的数字，并指定小数点后的位数
复制代码 代码如下:
string.Format("{0:N}", 14200) //结果为：14,200.00 （默认为小数点后面两位）
string.Format("{0:N3}", 14200.2458) //结果为：14,200.246 （自动四舍五入）
 
5、格式化百分比
string.Format("{0:P}", 0.24583) //结果为：24.58% （默认保留百分的两位小数）
string.Format("{0:P1}", 0.24583) //结果为：24.6% （自动四舍五入）

 
6、零占位符和数字占位符
复制代码 代码如下:
string.Format("{0:0000.00}", 12394.039) //结果为：12394.04
string.Format("{0:0000.00}", 194.039) //结果为：0194.04
string.Format("{0:###.##}", 12394.039) //结果为：12394.04
string.Format("{0:####.#}", 194.039) //结果为：194

 
下面的这段说明比较难理解，多测试一下实际的应用就可以明白了。
零占位符： 如果格式化的值在格式字符串中出现“0”的位置有一个数字，则此数字被复制到结果字符串中。小数点前最左边的“0”的位置和小数点后最右边的“0”的位置确定总在结果字符串中出现的数字范围。 “00”说明符使得值被舍入到小数点前最近的数字，其中零位总被舍去。
数字占位符： 如果格式化的值在格式字符串中出现“#”的位置有一个数字，则此数字被复制到结果字符串中。否则，结果字符串中的此位置不存储任何值。
请注意，如果“0”不是有效数字，此说明符永不显示“0”字符，即使“0”是字符串中唯一的数字。如果“0”是所显示的数字中的有效数字，则显示“0”字符。 “##”格式字符串使得值被舍入到小数点前最近的数字，其中零总被舍去。
 
7、日期格式化
 
复制代码 代码如下:
string.Format("{0:d}",System.DateTime.Now) //结果为：2009-3-20 （月份位置不是03）
string.Format("{0:D}",System.DateTime.Now) //结果为：2009年3月20日
string.Format("{0:f}",System.DateTime.Now) //结果为：2009年3月20日 15:37
string.Format("{0:F}",System.DateTime.Now) //结果为：2009年3月20日 15:37:52
string.Format("{0:g}",System.DateTime.Now) //结果为：2009-3-20 15:38
string.Format("{0:G}",System.DateTime.Now) //结果为：2009-3-20 15:39:27
string.Format("{0:m}",System.DateTime.Now) //结果为：3月20日
string.Format("{0:t}",System.DateTime.Now) //结果为：15:41
string.Format("{0:T}",System.DateTime.Now) //结果为：15:41:50